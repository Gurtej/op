#!/bin/bash
# -*- coding: UTF-8 -*-

# Script for building udns library for multiple platforms.


### Define text styles  ###########
TXT_C="tput setaf"    # set text color in BGR format
TXT_R="tput sgr0"     # reset text format
TXT_B="tput bold"     # set bold
TXT_U="tput sgr 0 1"  # set underlined

# Detect directory in which the script resides
BASEDIR=$(dirname "`[[ $0 == /* ]] && echo "$0" || echo "${PWD}/${0#./}"`")

# Define output directory if not defined yet
[ -z "$STAGING_PREFIX" ] && STAGING_PREFIX=$BASEDIR/../../../../hookflash-staging

# Detect OS
UNAME=$(uname)

validate_before(){
    [ $? != "0" ] && exit 1 || true
}


caption(){
	echo -e "\n`$TXT_B`Build script`$TXT_R` for building `$TXT_B`udns`$TXT_R` library for multiple platforms."
	echo -e "Maintainer: `$TXT_B`Predrag Mandic`$TXT_R` [`$TXT_U``$TXT_C 4`predrag@hookflash.com`$TXT_R`]`$TXT_R`"
}

help_darwin(){
	caption
	usage_darwin
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on OS X on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | ios"
	echo -e "\t\tBoth of these options build the same libraries that work on iOS. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and ios libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_darwin(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

help_linux(){
	caption
	usage_linux
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R`"
	echo -e "\t\tStart building for current processor architecture (32 or 64 bit)."
	echo -e "\t`$TXT_B`i386`$TXT_R`"
	echo -e "\t\tStart building for 32bit processor architecture."
	echo -e "\t`$TXT_B`x86_64`$TXT_R`"
	echo -e "\t\tStart building for 64bit processor architecture if your current architecture supports it."
	echo -e "\t`$TXT_B`arm`$TXT_R` | android"
	echo -e "\t\tBoth of these options build the same libraries that work on Android. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and android libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_linux(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

build_darwin(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#echo "`$TXT_B``$TXT_C 2`udns build for OS X started...`$TXT_R`" 2>&1 | tee $BASEDIR/build_darwin.log
	#mkdir -p $STAGING_PREFIX
	#TODO
}

build_ios(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#echo "`$TXT_B``$TXT_C 2`udns build for iOS started...`$TXT_R`" 2>&1 | tee $BASEDIR/build_ios.log
	#mkdir -p $STAGING_PREFIX
	#TODO
}

clean_darwin(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#TODO
}

build_linux(){
	echo "`$TXT_B``$TXT_C 2`udns build for Linux started...`$TXT_R`"
	mkdir -p $STAGING_PREFIX; validate_before

	cd $BASEDIR/../../udns
		./configure; validate_before
		make clean; validate_before
		make; validate_before
	cd -

	mkdir -p $STAGING_PREFIX/lib $STAGING_PREFIX/include/udns; validate_before #$STAGING_PREFIX/obj
	cp $BASEDIR/../../udns/*.a $STAGING_PREFIX/lib; validate_before
	cp $BASEDIR/../../udns/*.h $STAGING_PREFIX/include/udns; validate_before
}

build_linux_i386(){
	echo "`$TXT_B``$TXT_C 2`udns build for Linux started...`$TXT_R`"
	mkdir -p $STAGING_PREFIX; validate_before
	
	cd $BASEDIR/../../udns
		CFLAGS="-m32" ./configure; validate_before
		make clean; validate_before
		make; validate_before
	cd -
	
	mkdir -p $STAGING_PREFIX/lib $STAGING_PREFIX/include/udns; validate_before #$STAGING_PREFIX/obj
	cp $BASEDIR/../../udns/*.a $STAGING_PREFIX/lib; validate_before
	cp $BASEDIR/../../udns/*.h $STAGING_PREFIX/include/udns; validate_before
}

build_android(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#mkdir -p $STAGING_PREFIX
	#TODO
}

clean_linux(){
	echo -e "`$TXT_C 1`This option is not implemented. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#TODO
}


case "$UNAME" in
	Linux)
		case "$1" in
			arm|android)
				build_android
				;;
			x86)
				build_linux
				;;
			i386)
				build_linux_i386
				;;
			x86_64)
				if [ "`uname -m`" = "x86_64" ]; then
					build_linux
				else
					echo "`$TXT_C 1`Wrong cpu architecture.`$TXT_R`"
					exit 1
				fi
				;;
			all)
				build_linux
				build_android
				;;
			clean)
				clean_linux
				;;
			help)
				help_linux
				;;
			*)
				usage_linux
				exit 1
				;;
		esac
		;;

	Darwin)
		case "$1" in
			arm|ios)
				build_ios
				;;
			x86|x86_64|i386|osx)
				build_darwin
				;;
			all)
				build_darwin
				build_ios
				;;
			clean)
				clean_darwin
				;;
			help)
				help_darwin
				;;
			*)
				usage_darwin
				exit 1
				;;
		esac
		;;
	*)
		echo "`$TXT_B`$UNAME`$TXT_R`: `$TXT_C 1`operating system not supported`$TXT_R`"
		exit 1
		;;
esac

