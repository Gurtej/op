#!/bin/bash
# -*- coding: UTF-8 -*-

# Script for building boost libraries for Linux, OSX, iOS and Android.


### Define text styles  ###########
TXT_C="tput setaf"    # set text color in BGR format
TXT_R="tput sgr0"     # reset text format
TXT_B="tput bold"     # set bold
TXT_U="tput sgr 0 1"  # set underlined


# Detect directory in which the script resides
BASEDIR=$(dirname "`[[ $0 == /* ]] && echo "$0" || echo "${PWD}/${0#./}"`")

# Define output directory if not defined yet
[ -z "$STAGING_PREFIX" ] && STAGING_PREFIX=$BASEDIR/../../../../hookflash-staging
UNAME=$(uname)

validate_before(){
    [ $? != "0" ] && exit 1 || true
}


caption(){
	echo -e "\n`$TXT_B`Build script`$TXT_R` for building `$TXT_B`boost`$TXT_R` libraries for multiple platforms."
	echo -e "Maintainer: `$TXT_B`Predrag Mandic`$TXT_R` [`$TXT_U``$TXT_C 4`predrag@hookflash.com`$TXT_R`]`$TXT_R`"
}

help_darwin(){
	caption
	usage_darwin
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on OS X on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | ios"
	echo -e "\t\tBoth of these options build the same libraries that work on iOS. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and ios libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_darwin(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

help_linux(){
	caption
	usage_linux
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on Linux on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | android"
	echo -e "\t\tBoth of these options build the same libraries that work on Android. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and android libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_linux(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

build_darwin(){
	echo "`$TXT_B``$TXT_C 2`boost build for OS X started...`$TXT_R`"

	cd $BASEDIR/../../boost
	
	#removing old user-config.jam
	touch ~/user-config.jam
	rm -f ~/user-config.jam; validate_before
	
	./bootstrap.sh --with-libraries=thread,date_time ; validate_before
	./bjam clean; validate_before
	./bjam --prefix=$STAGING_PREFIX architecture=x86 address-model=32 link=static install ; validate_before
}

build_ios(){
    [[ -d "/Applications/Xcode.app/Contents/Developer" ]] && SDK="5.1" || SKD="5.0"
    export SDK
    [[ -d "/Applications/Xcode.app/Contents/Developer" ]] && DEVELOPER="/Applications/Xcode.app/Contents/Developer" || Developer="/Developer"
    export DEVELOPER
 
	echo "`$TXT_B``$TXT_C 2`boost build for iOS started...`$TXT_R`"
	
	cd $BASEDIR/../../boost
	
	#removing old user-config.jam
	touch ~/user-config.jam
	rm -f ~/user-config.jam; validate_before
	
	#creating user-config.jam
	if [[ -d "/Applications/Xcode.app/Contents/Developer" ]]; then
		echo """using darwin : 5.1~iphone
   : /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch armv7 -mthumb -fvisibility=hidden -fvisibility-inlines-hidden
   : <striper>
   : <architecture>arm <target-os>iphone
   ;

using darwin : 5.1~iphonesim
   : /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc -arch i386 -fvisibility=hidden -fvisibility-inlines-hidden
   : <striper>
   : <architecture>x86 <target-os>iphone
   ;
""" > ~/user-config.jam ; validate_before
	else
		echo """using darwin : 5.0~iphone
   : /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch armv7 -mthumb -fvisibility=hidden -fvisibility-inlines-hidden
   : <striper>
   : <architecture>arm <target-os>iphone
   ;

using darwin : 5.0~iphonesim
   : /Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc -arch i386 -fvisibility=hidden -fvisibility-inlines-hidden
   : <striper>
   : <architecture>x86 <target-os>iphone
   ;
""" > ~/user-config.jam ; validate_before
	fi
	
	./bootstrap.sh --with-libraries=thread,date_time ; validate_before
	
	export SDK_VERSION=$SDK
	./bjam --prefix=$STAGING_PREFIX/iPhoneOS${SDK_VERSION} toolset=darwin architecture=arm target-os=iphone macosx-version=iphone-${SDK_VERSION} define=_LITTLE_ENDIAN link=static install ; validate_before
	./bjam --prefix=$STAGING_PREFIX/iPhoneSimulator${SDK_VERSION} toolset=darwin architecture=x86 target-os=iphone macosx-version=iphonesim-${SDK_VERSION} link=static install ; validate_before
}

clean_darwin(){
	echo -e "`$TXT_C 1`Clean is not working. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
	#rm -rf $STAGING_PREFIX/iPhoneOS*
	#rm -rf $STAGING_PREFIX/iPhoneSimulator*
}

build_linux(){
	echo "`$TXT_B``$TXT_C 2`boost build for Linux started...`$TXT_R`"
	mkdir -p $STAGING_PREFIX; validate_before

	cd $BASEDIR/../../boost
	./bootstrap.sh --with-libraries=thread,date_time ; validate_before
	./bjam clean; validate_before
	./bjam --prefix=$STAGING_PREFIX cxxflags=-fPIC link=static install; validate_before
}

build_android(){
	echo -e "`$TXT_C 1`Android build is not working. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
}

clean_linux(){
	echo -e "`$TXT_C 1`Linux clean is not working. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
}


case "$UNAME" in
	Linux)
		case "$1" in
			arm|android)
				build_android
				;;
			x86|x86_64|i386)
				build_linux
				;;
			all)
				build_linux
				build_android
				;;
			clean)
				clean_linux
				;;
			help)
				help_linux
				;;
			*)
				usage_linux
				exit 1
				;;
		esac
		;;

	Darwin)
		case "$1" in
			arm|ios)
				build_ios
				;;
			x86|x86_64|i386|osx)
				build_darwin
				;;
			all)
				build_darwin
				build_ios
				;;
			clean)
				clean_darwin
				;;
			help)
				help_darwin
				;;
			*)
				usage_darwin
				exit 1
				;;
		esac
		;;
	*)
		echo "`$TXT_B`$UNAME`$TXT_R`: `$TXT_C 1`operating system not supported`$TXT_R`"
		exit 1
		;;
esac

